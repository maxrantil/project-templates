#!/bin/bash
# ABOUTME: Simplified direct hook logic tester
# ABOUTME: Fast validation without complex bash features

VERSION="${1:-weak}"
PASSED=0
FAILED=0
BYPASS_SUCCESS=0

echo "========================================="
echo "Pre-commit Hook Logic Tester"
echo "========================================="
echo "Version: $VERSION"
echo ""

test_pattern() {
    local num="$1"
    local name="$2"
    local content="$3"
    local expected="$4"
    local category="$5"

    local result

    if [[ "$VERSION" == "weak" ]]; then
        # Weak: basic grep
        if echo "$content" | grep -qiE "(Co-authored-by:.*(Claude|GPT|ChatGPT|Copilot|Gemini|Bard|AI)|Generated with.*(Claude|AI|GPT|ChatGPT|Copilot)|claude\.com/claude-code|(reviewed by|validated by|approved by|checked by).*(agent)|agent (review|validation|approval|check))"; then
            result="BLOCK"
        else
            result="PASS"
        fi
    else
        # Strong: Python normalization (matches .github version exactly)
        result=$(python3 - "$content" <<'PYEOF'
import sys, re

content = sys.argv[1]

def normalize(text):
    """Match the exact normalization from .github/.pre-commit-config.yaml"""
    text = text.lower()
    # Replace leetspeak numbers with letters
    replacements = {'1': 'l', '3': 'e', '4': 'a', '0': 'o', '5': 's', '7': 't'}
    for num, letter in replacements.items():
        text = text.replace(num, letter)
    # Remove spaces, hyphens, underscores
    return re.sub(r'[\s_-]', '', text)

normalized = normalize(content)

# Check for AI tool names in attribution context
ai_tools = ['claude', 'gpt', 'chatgpt', 'copilot', 'gemini', 'bard']
for tool in ai_tools:
    if tool in normalized:
        # Check if it's in attribution context
        attribution_verbs = ['coauthoredby', 'generatedwith', 'generatedby', 'reviewedby',
                            'validatedby', 'approvedby', 'checkedby', 'implementedby',
                            'createdby', 'writtenby', 'helpedby', 'assistedby']
        if any(verb in normalized for verb in attribution_verbs):
            print("BLOCK")
            sys.exit(0)

# Check explicit patterns
if re.search(r'claude\.com/claude-code', content, re.IGNORECASE):
    print("BLOCK")
    sys.exit(0)

# Check agent mentions
if re.search(r'(reviewed by|validated by|approved by|checked by).*(agent)', content, re.IGNORECASE):
    print("BLOCK")
    sys.exit(0)

# Check generic AI attribution
if re.search(r'\b(with|by|using|via|from|thanks to)\s+(AI|artificial intelligence|chatbot)\b', content, re.IGNORECASE):
    print("BLOCK")
    sys.exit(0)

print("PASS")
PYEOF
)
    fi

    if [[ "$result" == "$expected" ]]; then
        echo "✅ Test $num: $name - $result (expected $expected) [$category]"
        PASSED=$((PASSED + 1))
        if [[ "$category" == "Bypass" && "$VERSION" == "weak" && "$result" == "PASS" ]]; then
            BYPASS_SUCCESS=$((BYPASS_SUCCESS + 1))
        elif [[ "$category" == "Bypass" && "$VERSION" == "strong" && "$result" == "BLOCK" ]]; then
            BYPASS_SUCCESS=$((BYPASS_SUCCESS + 1))
        fi
    else
        echo "❌ Test $num: $name - $result (expected $expected) [$category]"
        FAILED=$((FAILED + 1))
    fi
}

echo "=== Valid Cases ==="
test_pattern 1 "Technical API mention" "This code integrates with Claude API" "PASS" "Valid"
test_pattern 2 "Tool name only" "Using claude backend" "PASS" "Valid"
test_pattern 3 "Feature description" "Added claude.ai support" "PASS" "Valid"

echo ""
echo "=== Obvious Violations ==="
test_pattern 4 "Co-authored-by: Claude" "Co-authored-by: Claude <email>" "BLOCK" "Violation"
test_pattern 5 "Generated with Claude" "Generated with Claude Code" "BLOCK" "Violation"
test_pattern 6 "AI assistance" "Built with AI assistance" "BLOCK" "Violation"
test_pattern 7 "Agent mention" "Reviewed by agent" "BLOCK" "Violation"

echo ""
echo "=== Bypass Attempts ==="
test_pattern 8 "Leetspeak: C1aude" "Co-authored-by: C1aude" "BLOCK" "Bypass"
test_pattern 9 "Leetspeak: Ch4tGPT" "Generated by Ch4tGPT" "BLOCK" "Bypass"
test_pattern 10 "Spacing: C l a u d e" "Generated with C l a u d e" "BLOCK" "Bypass"
test_pattern 11 "Underscore: C_l_a_u_d_e" "Generated with C_l_a_u_d_e" "BLOCK" "Bypass"
test_pattern 12 "Hyphen: C-l-a-u-d-e" "Generated with C-l-a-u-d-e" "BLOCK" "Bypass"
test_pattern 13 "Zero sub: C0-auth0red" "C0-auth0red-by: Claude" "BLOCK" "Bypass"
test_pattern 14 "Multiple leet: C1aud3" "Co-authored-by: C1aud3" "BLOCK" "Bypass"
test_pattern 15 "Mixed: Cl4ude spacing" "Generated by Cl 4 ude" "BLOCK" "Bypass"
test_pattern 16 "G3m1n1" "Built with G3m1n1" "BLOCK" "Bypass"
test_pattern 17 "G3_m_1_n_i" "Generated by G3_m_1_n_i" "BLOCK" "Bypass"

echo ""
echo "========================================="
echo "Results Summary"
echo "========================================="
echo "Version: $VERSION"
TOTAL=$((PASSED + FAILED))
echo "Total: $TOTAL"
echo "Passed: $PASSED"
echo "Failed: $FAILED"
echo "Success Rate: $((PASSED * 100 / TOTAL))%"

if [[ "$VERSION" == "weak" ]]; then
    echo "Bypasses that succeeded: $BYPASS_SUCCESS"
    echo ""
    echo "⚠️  WEAK VERSION RESULT: $BYPASS_SUCCESS/10 bypass attempts succeeded"
    echo "This proves the current grep-based patterns are bypassable."
else
    echo "Bypasses blocked: $BYPASS_SUCCESS"
    if [[ $BYPASS_SUCCESS -eq 10 ]]; then
        echo "✅ STRONG VERSION: 100% bypass protection!"
    fi
fi

echo ""
[[ $FAILED -eq 0 ]] && echo "✅ ALL TESTS PASSED" || echo "⚠️  $FAILED TESTS FAILED"
